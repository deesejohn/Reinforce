# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - main

pr:
  - main

pool:
  vmImage: "ubuntu-20.04"

variables:
  buildConfiguration: "Release"

steps:
  - task: UseDotNet@2
    inputs:
      packageType: "sdk"
      version: "6.0.x"
      performMultiLevelLookup: true

  - bash: |
      dotnet tool install --tool-path . nbgv
      ./nbgv cloud
    displayName: Set BuildNumber

  # - bash: |
  #     dotnet tool install --tool-path . dotnet-sonarscanner
  #   displayName: SonarCloud Download

  # - bash: |
  #     ./dotnet-sonarscanner begin \
  #       /o:deesejohn \
  #       /k:deesejohn_Reinforce \
  #       /d:sonar.host.url=https://sonarcloud.io \
  #       /d:sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/tests/**/coverage.opencover.xml \
  #       /d:sonar.exclusions=examples/**/*
  #   env:
  #     SONAR_TOKEN: $(SONAR_TOKEN)
  #   displayName: SonarCloud Prepare

  - task: DotNetCoreCLI@2
    inputs:
      command: build
      arguments: -c $(BuildConfiguration)
    displayName: Build

  - task: DotNetCoreCLI@2
    inputs:
      command: test
      projects: "tests/**/*.csproj"
      arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:ExcludeByFile="examples/**%2ctests/**"'
    displayName: Unit Tests

  - bash: |
      dotnet tool install --tool-path . dotnet-reportgenerator-globaltool
      ./reportgenerator -reports:$(Build.SourcesDirectory)/tests/**/coverage.opencover.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:'Cobertura'
    displayName: Create Code Coverage Report

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: "Cobertura"
      summaryFileLocation: "$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml"
    displayName: Publish Code Coverage

  # - bash: |
  #     ./dotnet-sonarscanner end
  #   env:
  #     SONAR_TOKEN: $(SONAR_TOKEN)
  #   displayName: SonarCloud Analyze

  - task: DotNetCoreCLI@2
    inputs:
      command: pack
      packagesToPack: src/**/*.csproj
      configuration: $(BuildConfiguration)
      packDirectory: $(Build.ArtifactStagingDirectory)
      nobuild: true
      verbosityPack: Minimal
    displayName: Pack

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "drop"
      publishLocation: "Container"
    displayName: Publish Artifacts
